package org.nampython.core;

import com.cyecize.ioc.annotations.Autowired;
import com.cyecize.ioc.annotations.PostConstruct;
import com.cyecize.ioc.annotations.Service;
import org.nampython.config.ConfigCenter;
import org.nampython.config.ConfigValue;
import org.nampython.support.PathUtil;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Pattern;

@Service
public class ResourceLocation {
    private static final String RESOURCE_NOT_FOUND_FORMAT = "Resource \"%s\" not found!";
    private final ConfigCenter configCenter;
    private String pathToAssetsFormat;
    private String pathToWebappsFormat;
    private final List<String> appNames;

    @Autowired
    public ResourceLocation(ConfigCenter configCenter) {
        this.configCenter = configCenter;
        this.appNames = new ArrayList<>();
    }

    @PostConstruct
    public void initialize() {
        this.appNames.addAll(List.of(this.configCenter.getConfigParamString(ConfigValue.MAIN_APP_JAR_NAME)));
        this.initDirectories();
    }

    /**
     *
     */
    private void initDirectories() {
        final String workingDir = this.configCenter.getConfigValue(ConfigValue.WORKING_DIRECTORY);
        String pathToAssets = PathUtil.appendPath(
                workingDir,
                this.configCenter.getConfigValue(ConfigValue.ASSETS_DIR_NAME)
        );
        pathToAssets = PathUtil.appendPath(pathToAssets, "%s");
        pathToAssets = PathUtil.appendPath(pathToAssets, "%s");
        this.pathToAssetsFormat = pathToAssets;
        String pathToWebApps = PathUtil.appendPath(
                workingDir,
                this.configCenter.getConfigValue(ConfigValue.WEB_APPS_DIR_NAME)
        );
        pathToWebApps = PathUtil.appendPath(
                pathToWebApps,
                "%s"
        );
        pathToWebApps = PathUtil.appendPath(
                pathToWebApps,
                this.configCenter.getConfigValue(ConfigValue.APP_COMPILE_OUTPUT_DIR_NAME)
        );
        pathToWebApps = PathUtil.appendPath(
                pathToWebApps,
                this.configCenter.getConfigValue(ConfigValue.APP_RESOURCES_DIR_NAME)
        );

        pathToWebApps = PathUtil.appendPath(
                pathToWebApps,
                "%s"
        );

        this.pathToWebappsFormat = pathToWebApps;
    }

    /**
     * Looks for a resource in the webapps or in the assets directory.
     *
     * @param requestURL - path to resource.
     * @return file which name matches the request url.
     * @throws ResourceNotFoundException if the resource file cannot be found.
     */
    public File locateResource(String requestURL) throws ResourceNotFoundException {
        final String currentRequestAppName = this.getAppNameForRequest(requestURL);
        requestURL = requestURL.replaceFirst(Pattern.quote("/" + currentRequestAppName), "");
        final String webAppResourceDir = String.format(
                this.pathToWebappsFormat,
                PathUtil.trimAllSlashes(currentRequestAppName),
                PathUtil.trimAllSlashes(requestURL)
        );
        File file = new File(webAppResourceDir);
        if (!file.exists() || !file.isDirectory()) {
            final String assetsResourceDir = String.format(
                    this.pathToAssetsFormat,
                    PathUtil.trimAllSlashes(currentRequestAppName),
                    PathUtil.trimAllSlashes(requestURL)
            );
            file = new File(assetsResourceDir);
        }
        if (file.exists() && !file.isDirectory()) {
            return file;
        } else {
            throw new ResourceNotFoundException(String.format(RESOURCE_NOT_FOUND_FORMAT, requestURL));
        }
    }

    /**
     * @param requestURL
     * @return code generated by jvm
     */
    private String getAppNameForRequest(String requestURL) {
        Iterator<String> appNames = this.appNames.iterator();
        String appName;
        do {
            if (!appNames.hasNext()) {
                return this.configCenter.getConfigValue(ConfigValue.MAIN_APP_JAR_NAME);
            }
            appName = appNames.next();
        } while (!requestURL.startsWith("/" + appName));
        return appName;
//        for (String appName : this.appNames) {
//            if (requestURL.startsWith("/" + appName)) {
//                return appName;
//            }
//        }
//        return this.configCenter.getConfigValue(ConfigValue.MAIN_APP_JAR_NAME);
    }
}